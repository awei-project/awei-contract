// SPDX-License-Identifier: MIT
pragma solidity >=0.8.21;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout, FieldLayoutLib } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { RESOURCE_TABLE, RESOURCE_OFFCHAIN_TABLE } from "@latticexyz/store/src/storeResourceTypes.sol";

ResourceId constant _tableId = ResourceId.wrap(
  bytes32(abi.encodePacked(RESOURCE_TABLE, bytes14(""), bytes16("ChainLinkRequest")))
);
ResourceId constant ChainLinkRequestTableId = _tableId;

FieldLayout constant _fieldLayout = FieldLayout.wrap(
  0x0020010220000000000000000000000000000000000000000000000000000000
);

struct ChainLinkRequestData {
  bytes32 txHash;
  bytes response;
  bytes error;
}

library ChainLinkRequest {
  /**
   * @notice Get the table values' field layout.
   * @return _fieldLayout The field layout for the table.
   */
  function getFieldLayout() internal pure returns (FieldLayout) {
    return _fieldLayout;
  }

  /**
   * @notice Get the table's key schema.
   * @return _keySchema The key schema for the table.
   */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _keySchema = new SchemaType[](1);
    _keySchema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_keySchema);
  }

  /**
   * @notice Get the table's value schema.
   * @return _valueSchema The value schema for the table.
   */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _valueSchema = new SchemaType[](3);
    _valueSchema[0] = SchemaType.BYTES32;
    _valueSchema[1] = SchemaType.BYTES;
    _valueSchema[2] = SchemaType.BYTES;

    return SchemaLib.encode(_valueSchema);
  }

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "requestId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](3);
    fieldNames[0] = "txHash";
    fieldNames[1] = "response";
    fieldNames[2] = "error";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config (using the specified store).
   */
  function register(IStore _store) internal {
    _store.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get txHash.
   */
  function getTxHash(bytes32 requestId) internal view returns (bytes32 txHash) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Get txHash.
   */
  function _getTxHash(bytes32 requestId) internal view returns (bytes32 txHash) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Get txHash (using the specified store).
   */
  function getTxHash(IStore _store, bytes32 requestId) internal view returns (bytes32 txHash) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Set txHash.
   */
  function setTxHash(bytes32 requestId, bytes32 txHash) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((txHash)), _fieldLayout);
  }

  /**
   * @notice Set txHash.
   */
  function _setTxHash(bytes32 requestId, bytes32 txHash) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((txHash)), _fieldLayout);
  }

  /**
   * @notice Set txHash (using the specified store).
   */
  function setTxHash(IStore _store, bytes32 requestId, bytes32 txHash) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    _store.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((txHash)), _fieldLayout);
  }

  /**
   * @notice Get response.
   */
  function getResponse(bytes32 requestId) internal view returns (bytes memory response) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (bytes(_blob));
  }

  /**
   * @notice Get response.
   */
  function _getResponse(bytes32 requestId) internal view returns (bytes memory response) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (bytes(_blob));
  }

  /**
   * @notice Get response (using the specified store).
   */
  function getResponse(IStore _store, bytes32 requestId) internal view returns (bytes memory response) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    bytes memory _blob = _store.getDynamicField(_tableId, _keyTuple, 0);
    return (bytes(_blob));
  }

  /**
   * @notice Set response.
   */
  function setResponse(bytes32 requestId, bytes memory response) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, bytes((response)));
  }

  /**
   * @notice Set response.
   */
  function _setResponse(bytes32 requestId, bytes memory response) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, bytes((response)));
  }

  /**
   * @notice Set response (using the specified store).
   */
  function setResponse(IStore _store, bytes32 requestId, bytes memory response) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    _store.setDynamicField(_tableId, _keyTuple, 0, bytes((response)));
  }

  /**
   * @notice Get the length of response.
   */
  function lengthResponse(bytes32 requestId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of response.
   */
  function _lengthResponse(bytes32 requestId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of response (using the specified store).
   */
  function lengthResponse(IStore _store, bytes32 requestId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    uint256 _byteLength = _store.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of response.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemResponse(bytes32 requestId, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (bytes(_blob));
    }
  }

  /**
   * @notice Get an item of response.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemResponse(bytes32 requestId, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (bytes(_blob));
    }
  }

  /**
   * @notice Get an item of response (using the specified store).
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemResponse(IStore _store, bytes32 requestId, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    unchecked {
      bytes memory _blob = _store.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (bytes(_blob));
    }
  }

  /**
   * @notice Push a slice to response.
   */
  function pushResponse(bytes32 requestId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /**
   * @notice Push a slice to response.
   */
  function _pushResponse(bytes32 requestId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /**
   * @notice Push a slice to response (using the specified store).
   */
  function pushResponse(IStore _store, bytes32 requestId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    _store.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /**
   * @notice Pop a slice from response.
   */
  function popResponse(bytes32 requestId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Pop a slice from response.
   */
  function _popResponse(bytes32 requestId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Pop a slice from response (using the specified store).
   */
  function popResponse(IStore _store, bytes32 requestId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    _store.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Update a slice of response at `_index`.
   */
  function updateResponse(bytes32 requestId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update a slice of response at `_index`.
   */
  function _updateResponse(bytes32 requestId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update a slice of response (using the specified store) at `_index`.
   */
  function updateResponse(IStore _store, bytes32 requestId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      _store.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get error.
   */
  function getError(bytes32 requestId) internal view returns (bytes memory error) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 1);
    return (bytes(_blob));
  }

  /**
   * @notice Get error.
   */
  function _getError(bytes32 requestId) internal view returns (bytes memory error) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 1);
    return (bytes(_blob));
  }

  /**
   * @notice Get error (using the specified store).
   */
  function getError(IStore _store, bytes32 requestId) internal view returns (bytes memory error) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    bytes memory _blob = _store.getDynamicField(_tableId, _keyTuple, 1);
    return (bytes(_blob));
  }

  /**
   * @notice Set error.
   */
  function setError(bytes32 requestId, bytes memory error) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 1, bytes((error)));
  }

  /**
   * @notice Set error.
   */
  function _setError(bytes32 requestId, bytes memory error) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreCore.setDynamicField(_tableId, _keyTuple, 1, bytes((error)));
  }

  /**
   * @notice Set error (using the specified store).
   */
  function setError(IStore _store, bytes32 requestId, bytes memory error) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    _store.setDynamicField(_tableId, _keyTuple, 1, bytes((error)));
  }

  /**
   * @notice Get the length of error.
   */
  function lengthError(bytes32 requestId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of error.
   */
  function _lengthError(bytes32 requestId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of error (using the specified store).
   */
  function lengthError(IStore _store, bytes32 requestId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    uint256 _byteLength = _store.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of error.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemError(bytes32 requestId, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 1, (_index + 1) * 1);
      return (bytes(_blob));
    }
  }

  /**
   * @notice Get an item of error.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemError(bytes32 requestId, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 1, (_index + 1) * 1);
      return (bytes(_blob));
    }
  }

  /**
   * @notice Get an item of error (using the specified store).
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemError(IStore _store, bytes32 requestId, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    unchecked {
      bytes memory _blob = _store.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 1, (_index + 1) * 1);
      return (bytes(_blob));
    }
  }

  /**
   * @notice Push a slice to error.
   */
  function pushError(bytes32 requestId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 1, bytes((_slice)));
  }

  /**
   * @notice Push a slice to error.
   */
  function _pushError(bytes32 requestId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 1, bytes((_slice)));
  }

  /**
   * @notice Push a slice to error (using the specified store).
   */
  function pushError(IStore _store, bytes32 requestId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    _store.pushToDynamicField(_tableId, _keyTuple, 1, bytes((_slice)));
  }

  /**
   * @notice Pop a slice from error.
   */
  function popError(bytes32 requestId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 1, 1);
  }

  /**
   * @notice Pop a slice from error.
   */
  function _popError(bytes32 requestId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 1, 1);
  }

  /**
   * @notice Pop a slice from error (using the specified store).
   */
  function popError(IStore _store, bytes32 requestId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    _store.popFromDynamicField(_tableId, _keyTuple, 1, 1);
  }

  /**
   * @notice Update a slice of error at `_index`.
   */
  function updateError(bytes32 requestId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update a slice of error at `_index`.
   */
  function _updateError(bytes32 requestId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update a slice of error (using the specified store) at `_index`.
   */
  function updateError(IStore _store, bytes32 requestId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      _store.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 requestId) internal view returns (ChainLinkRequestData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 requestId) internal view returns (ChainLinkRequestData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data (using the specified store).
   */
  function get(IStore _store, bytes32 requestId) internal view returns (ChainLinkRequestData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = _store.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(bytes32 requestId, bytes32 txHash, bytes memory response, bytes memory error) internal {
    bytes memory _staticData = encodeStatic(txHash);

    PackedCounter _encodedLengths = encodeLengths(response, error);
    bytes memory _dynamicData = encodeDynamic(response, error);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(bytes32 requestId, bytes32 txHash, bytes memory response, bytes memory error) internal {
    bytes memory _staticData = encodeStatic(txHash);

    PackedCounter _encodedLengths = encodeLengths(response, error);
    bytes memory _dynamicData = encodeDynamic(response, error);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using individual values (using the specified store).
   */
  function set(IStore _store, bytes32 requestId, bytes32 txHash, bytes memory response, bytes memory error) internal {
    bytes memory _staticData = encodeStatic(txHash);

    PackedCounter _encodedLengths = encodeLengths(response, error);
    bytes memory _dynamicData = encodeDynamic(response, error);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    _store.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 requestId, ChainLinkRequestData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.txHash);

    PackedCounter _encodedLengths = encodeLengths(_table.response, _table.error);
    bytes memory _dynamicData = encodeDynamic(_table.response, _table.error);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 requestId, ChainLinkRequestData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.txHash);

    PackedCounter _encodedLengths = encodeLengths(_table.response, _table.error);
    bytes memory _dynamicData = encodeDynamic(_table.response, _table.error);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct (using the specified store).
   */
  function set(IStore _store, bytes32 requestId, ChainLinkRequestData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.txHash);

    PackedCounter _encodedLengths = encodeLengths(_table.response, _table.error);
    bytes memory _dynamicData = encodeDynamic(_table.response, _table.error);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    _store.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(bytes memory _blob) internal pure returns (bytes32 txHash) {
    txHash = (Bytes.slice32(_blob, 0));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    PackedCounter _encodedLengths,
    bytes memory _blob
  ) internal pure returns (bytes memory response, bytes memory error) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    response = (bytes(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(1);
    }
    error = (bytes(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    PackedCounter _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (ChainLinkRequestData memory _table) {
    (_table.txHash) = decodeStatic(_staticData);

    (_table.response, _table.error) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 requestId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 requestId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Delete all data for given keys (using the specified store).
   */
  function deleteRecord(IStore _store, bytes32 requestId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    _store.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(bytes32 txHash) internal pure returns (bytes memory) {
    return abi.encodePacked(txHash);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(
    bytes memory response,
    bytes memory error
  ) internal pure returns (PackedCounter _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = PackedCounterLib.pack(bytes(response).length, bytes(error).length);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(bytes memory response, bytes memory error) internal pure returns (bytes memory) {
    return abi.encodePacked(bytes((response)), bytes((error)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dyanmic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    bytes32 txHash,
    bytes memory response,
    bytes memory error
  ) internal pure returns (bytes memory, PackedCounter, bytes memory) {
    bytes memory _staticData = encodeStatic(txHash);

    PackedCounter _encodedLengths = encodeLengths(response, error);
    bytes memory _dynamicData = encodeDynamic(response, error);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 requestId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    return _keyTuple;
  }
}
